{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA6CA,SAASC,EAAYC,GACnBH,EAAAI,OAAOC,QAAQF,GAEjB,SAASG,EAAUC,GACjBP,EAAAI,OAAOI,QAAQD,GA/CCE,SAASC,cAAc,SAC/BC,iBAAiB,UAI3B,SAAqBC,GACnB,IAAIC,EAAOC,OAAOC,KAAKF,KAAKV,OACxBa,EAASF,OAAOC,KAAKC,OAAOb,OAC5Bc,EAAQH,OAAOC,KAAKE,MAAMd,OAC1Be,EAAQ,EACRC,EAAeF,EAAQJ,EAE3BD,EAAMQ,iBAEN,MAAMC,EAAmBC,aAAY,KACnCJ,GAAS,EACTC,GAAgBN,EAapB,SAAuBU,EAAUN,GAC/B,MAAMO,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAE3BC,YAAW,KACLN,EACFI,EAAQ,uBAAqBL,QAAiBN,OAE5CY,EAAK,sBAAoBN,QAAeN,SAE5CA,MArBFc,CAAcb,EAAOC,GACrBa,KAAK9B,GACL+B,MAAM3B,GAEFY,IAAUF,GACZkB,cAAcb,KAEfR","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst delayForm = document.querySelector('.form');\ndelayForm.addEventListener('submit', getPromises);\n\n\n\nfunction getPromises(event) {\n  let step = Number(this.step.value);\n  let amount = Number(this.amount.value);\n  let delay = Number(this.delay.value);\n  let count = 0;\n  let delayForEach = delay - step;\n\n  event.preventDefault();\n\n  const generatorCounter = setInterval(() => {\n    count += 1;\n    delayForEach += step;\n\n    createPromise(count, delayForEach).\n    then(showSucces).\n    catch(showError);\n    \n    if (count === amount) {\n      clearInterval(generatorCounter);\n    }\n  }, step);\n\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    },delay);\n  });\n}\n\nfunction showSucces (value){\n  Notify.success(value);\n}\nfunction showError(error) {\n  Notify.failure(error);\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$showSucces","value","Notify","success","$47d4ff9957288465$var$showError","error","failure","document","querySelector","addEventListener","event","step","Number","this","amount","delay","count","delayForEach","preventDefault","generatorCounter","setInterval","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","catch","clearInterval"],"version":3,"file":"03-promises.c7c3601a.js.map"}